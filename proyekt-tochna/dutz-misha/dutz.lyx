#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass heb-article
\begin_preamble
\def\HeblatexEncoding{HE8}
\def\HeblatexEncodingFile{he8enc}
\usepackage{color}
\definecolor{keywordcolor}{rgb}{0.3,0.3,0.3}
\definecolor{commentcolor}{rgb}{0.0,0.0,0.0}
\definecolor{stringcolor}{rgb}{0.5,0.5,0.5}
\definecolor{numbercolor}{rgb}{0,0,0}
\usepackage{titlesec}
\titlespacing{\section} {0pt}{0pt}{0pt}
\titleformat{\section}[block]{\Large\bfseries\filcenter}{}{0pt}{}

\newcommand{\tmpsection}[1]{}
\let\tmpsection=\section
\renewcommand{\section}[1]{\tmpsection{\underline{#1}}}

\setlength{\parskip}{0pt}
\setlength{\itemsep}{0pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "courier" "FiraCode Nerd Font"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 1cm
\rightmargin 0cm
\bottommargin 1cm
\headheight 1.5cm
\headsep 1.5cm
\footskip 1.5cm
\columnsep 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section

\lang english
numpy
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\footnotesize\ttfamily},showstringspaces=false,tabsize=4,commentstyle={\color{commentcolor}},keywordstyle={\color{keywordcolor}},stringstyle={\color{stringcolor}},aboveskip=0em,belowskip=0em,morekeywords={np}"
inline false
status open

\begin_layout Plain Layout

# creating arrays
\end_layout

\begin_layout Plain Layout

np.array([1, 2, 3])
\end_layout

\begin_layout Plain Layout

np.array([[1, 7]]).shape == (1, 2)
\end_layout

\begin_layout Plain Layout

np.array([[1, 7]]).ndim == 2  # dimension
\end_layout

\begin_layout Plain Layout

np.array([[1, 7]]).dtype == 
\begin_inset Quotes eld
\end_inset

int64
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

np.array([1, 2], dtype=np.float64)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

np.zeros((3, 2, 5))  # all zeros, shape is 3, 2, 5
\end_layout

\begin_layout Plain Layout

# that is 3 arrays of 2 arrays of 5 items
\end_layout

\begin_layout Plain Layout

np.ones((3, 2, 5))
\end_layout

\begin_layout Plain Layout

np.full((3, 2, 5), 7)  # all filled with 7
\end_layout

\begin_layout Plain Layout

np.eye(3)              # identity matrix
\end_layout

\begin_layout Plain Layout

np.array_equal(np.arange(1, 11, 2),  # like range
\end_layout

\begin_layout Plain Layout

               np.array([1, 3, 5, 7, 9]))
\end_layout

\begin_layout Plain Layout

np.arange(1, 7).reshape(3, 2)  # [[1,2],[3,4],[5,6]]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# sum
\end_layout

\begin_layout Plain Layout

a = np.array([[1, 2, 3], [4, 5, 6]])
\end_layout

\begin_layout Plain Layout

np.sum(a, axis=0) == [5, 7, 9]
\end_layout

\begin_layout Plain Layout

np.sum(a, axis=1) == [6, 15]
\end_layout

\begin_layout Plain Layout

np.sum(a) ==         21  # sum of all items
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# slicing
\end_layout

\begin_layout Plain Layout

a = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
\end_layout

\begin_layout Plain Layout

a[:2, 1:3]    # [[2, 3], [6, 7]]
\end_layout

\begin_layout Plain Layout

a[2, 1:3]     # [10, 11]
\end_layout

\begin_layout Plain Layout

a[[0, 2], 0]  # [1, 9]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# operators
\end_layout

\begin_layout Plain Layout

x + y, np.add(x, y), x - y, np.subtract(x, y), x * y,
\end_layout

\begin_layout Plain Layout

np.multiply(x, y), x / y, np.divide(x, y), np.sqrt(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# example of slicing and operators
\end_layout

\begin_layout Plain Layout

a = np.array([[1, 2], [3, 4], [5,6]])
\end_layout

\begin_layout Plain Layout

b = np.array([1, 0])
\end_layout

\begin_layout Plain Layout

c = np.zeros_like(a)  # like a.shape
\end_layout

\begin_layout Plain Layout

for i in range(a.shape[0]):
\end_layout

\begin_layout Plain Layout

	c[i, :] = a[i, :] + b
\end_layout

\begin_layout Plain Layout

# c is [[2, 2], [4, 4], [6, 6]]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# linear algebra
\end_layout

\begin_layout Plain Layout

x = np.array([[1, 2], [3, 4]])
\end_layout

\begin_layout Plain Layout

v = np.array([9, 10])
\end_layout

\begin_layout Plain Layout

x.dot(v), x @ v  # [29, 67]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

np.linalg.inv(x)  # inverse matrix
\end_layout

\begin_layout Plain Layout

x.T               # transpose
\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang english
pandas
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\footnotesize\ttfamily},showstringspaces=false,tabsize=4,commentstyle={\color{commentcolor}},keywordstyle={\color{keywordcolor}},stringstyle={\color{stringcolor}},aboveskip=0em,belowskip=0em,morekeywords={np}"
inline false
status open

\begin_layout Plain Layout

names = pd.Series([
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

])
\end_layout

\begin_layout Plain Layout

popul = pd.Series([852469, 1015785, 485199])
\end_layout

\begin_layout Plain Layout

pd.DataFrame({
\begin_inset Quotes eld
\end_inset

City Name
\begin_inset Quotes erd
\end_inset

:names,
\begin_inset Quotes erd
\end_inset

Population
\begin_inset Quotes erd
\end_inset

:popul})
\end_layout

\begin_layout Plain Layout

# if the series length doesn't match the rest is NaN
\end_layout

\begin_layout Plain Layout

# you can only check for it with pd.isna, don't do it
\end_layout

\begin_layout Plain Layout

df = pd.read_csv(
\begin_inset Quotes eld
\end_inset

filename.csv
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

df[
\begin_inset Quotes eld
\end_inset

country
\begin_inset Quotes erd
\end_inset

] == 
\begin_inset Quotes eld
\end_inset

Israel
\begin_inset Quotes erd
\end_inset

  # lots of booleans
\end_layout

\begin_layout Plain Layout

df[(df[
\begin_inset Quotes eld
\end_inset

country
\begin_inset Quotes erd
\end_inset

]==
\begin_inset Quotes eld
\end_inset

Israel
\begin_inset Quotes erd
\end_inset

) & (df[
\begin_inset Quotes eld
\end_inset

population
\begin_inset Quotes erd
\end_inset

]>7000)]  # only relevant rows
\end_layout

\begin_layout Plain Layout

df[
\begin_inset Quotes eld
\end_inset

country
\begin_inset Quotes erd
\end_inset

][10]  # country of 11th row
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# iloc is by index, loc is by column labels
\end_layout

\begin_layout Plain Layout

df.iloc[-1]    # last row
\end_layout

\begin_layout Plain Layout

df.iloc[:, 0]  # first column
\end_layout

\begin_layout Plain Layout

df.loc[103:107, 
\begin_inset Quotes eld
\end_inset

country
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

df = df.set_index(0), df = df.set_index(
\begin_inset Quotes eld
\end_inset

country
\begin_inset Quotes erd
\end_inset

),
\end_layout

\begin_layout Plain Layout

  df = df.reset_index()  # change the index
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# groupby
\end_layout

\begin_layout Plain Layout

df.groupby([
\begin_inset Quotes eld
\end_inset

Team
\begin_inset Quotes erd
\end_inset

]).Salary.mean()  # averages of salaries
\end_layout

\begin_layout Plain Layout

# groupby, groupby.Salary returns a DataFrameGroupBy
\end_layout

\begin_layout Plain Layout

# and SeriesGroupBy, which are special objects
\end_layout

\begin_layout Plain Layout

df.groupby([
\begin_inset Quotes eld
\end_inset

Team
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Position
\begin_inset Quotes erd
\end_inset

]).Name.count().head(15)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# merge
\end_layout

\begin_layout Plain Layout

# default is to use intersection of keys from both
\end_layout

\begin_layout Plain Layout

pd.merge(df1, df2, on=
\begin_inset Quotes erd
\end_inset

id
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

# use only keys from left, may add nans
\end_layout

\begin_layout Plain Layout

pd.merge(df1, df2, how=
\begin_inset Quotes erd
\end_inset

left
\begin_inset Quotes erd
\end_inset

, on=
\begin_inset Quotes erd
\end_inset

id
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

# how=
\begin_inset Quotes erd
\end_inset

outer
\begin_inset Quotes erd
\end_inset

 is for the union of all keys, may add nans
\end_layout

\begin_layout Plain Layout

# on can also be a list
\end_layout

\begin_layout Plain Layout

pd.concat([df1, df2])  # combine the rows of both tables
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# apply
\end_layout

\begin_layout Plain Layout

capitalizer = lambda x: x.capitalize()
\end_layout

\begin_layout Plain Layout

df[
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

] = df[
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

].apply(capitalizer)
\end_layout

\end_inset


\end_layout

\begin_layout Section
קבצים
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\footnotesize\ttfamily},showstringspaces=false,tabsize=4,commentstyle={\color{commentcolor}},keywordstyle={\color{keywordcolor}},stringstyle={\color{stringcolor}},aboveskip=0em,belowskip=0em,morekeywords={np}"
inline false
status open

\begin_layout Plain Layout

FILE *fopen(const char *filename, const char *mode);
\end_layout

\begin_layout Plain Layout

// returns NULL on failure
\end_layout

\begin_layout Plain Layout

int fclose(FILE *fp);
\end_layout

\begin_layout Plain Layout

// returns 0 on success or EOF on failure
\end_layout

\begin_layout Plain Layout

int fgetc(FILE *fp);
\end_layout

\begin_layout Plain Layout

// EOF on end of file or error, otherwise the character
\end_layout

\begin_layout Plain Layout

int fputc(int c, FILE *fp);
\end_layout

\begin_layout Plain Layout

// EOF on error, otherwise the same character
\end_layout

\begin_layout Plain Layout

int fprintf(FILE *fp, const char *format, ...);
\end_layout

\begin_layout Plain Layout

// returns the number of characters printed
\end_layout

\begin_layout Plain Layout

// fprintf(stdout, ...) is equivalent to printf(...)
\end_layout

\begin_layout Plain Layout

int fscanf(FILE *fp, const char *format, ...);
\end_layout

\begin_layout Plain Layout

// returns the number of successful inputs
\end_layout

\begin_layout Plain Layout

int feof(FILE *fp);
\end_layout

\begin_layout Plain Layout

// non-zero when end of file reached
\end_layout

\begin_layout Plain Layout

char *fgets(char *s, int size, FILE *fp);
\end_layout

\begin_layout Plain Layout

// appends '
\backslash
0', stops on EOF or newline,
\end_layout

\begin_layout Plain Layout

// returns NULL when no characters have been read
\end_layout

\begin_layout Plain Layout

int fputs(char *s, FILE *fp);
\end_layout

\begin_layout Plain Layout

// without 
\backslash
0, EOF on error, non-negative on success
\end_layout

\begin_layout Plain Layout

int fflush(FILE *fp);
\end_layout

\begin_layout Plain Layout

// flushes writing, returns 0 on success and EOF on error
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int sprintf(char *s, const char *format, ...);
\end_layout

\begin_layout Plain Layout

int sscanf(char *s, const char *format, ...);
\end_layout

\begin_layout Plain Layout

// like fprintf and scanf but into a string
\end_layout

\end_inset


\end_layout

\end_body
\end_document

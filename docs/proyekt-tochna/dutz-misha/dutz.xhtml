<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.3.6.1" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>LyX Document</title>
<style type='text/css'>
/* Layout-provided Styles */
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
div.standard {
	margin-bottom: 2ex;
}
div.plain_layout {
text-align: left;

}
div.float-listings {
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
}
div.listings-caption {
	text-align: center;
	border: 2px solid black;
	padding: 1ex;
	margin: 1ex;
	}


</style>
</head>
<body dir="auto">
<h2 class="section" id='magicparlabel-1'><span class="section_label">1</span> numpy</h2>

<div class='float-listings'><pre class ='listings Python'># creating arrays
np.array([1, 2, 3])
np.array([[1, 7]]).shape == (1, 2)
np.array([[1, 7]]).ndim == 2  # dimension
np.array([[1, 7]]).dtype == &ldquo;int64&rdquo;
np.array([1, 2], dtype=np.float64)

np.zeros((3, 2, 5))  # all zeros, shape is 3, 2, 5
# that is 3 arrays of 2 arrays of 5 items
np.ones((3, 2, 5))
np.full((3, 2, 5), 7)  # all filled with 7
np.eye(3)              # identity matrix
np.array_equal(np.arange(1, 11, 2),  # like range
               np.array([1, 3, 5, 7, 9]))
np.arange(1, 7).reshape(3, 2)  # [[1,2],[3,4],[5,6]]

# sum
a = np.array([[1, 2, 3], [4, 5, 6]])
np.sum(a, axis=0) == [5, 7, 9]
np.sum(a, axis=1) == [6, 15]
np.sum(a) ==         21  # sum of all items

# slicing
a = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
a[:2, 1:3]    # [[2, 3], [6, 7]]
a[2, 1:3]     # [10, 11]
a[[0, 2], 0]  # [1, 9]

# operators
x + y, np.add(x, y), x - y, np.subtract(x, y), x * y,
np.multiply(x, y), x / y, np.divide(x, y), np.sqrt(x)

# example of slicing and operators
a = np.array([[1, 2], [3, 4], [5,6]])
b = np.array([1, 0])
c = np.zeros_like(a)  # like a.shape
for i in range(a.shape[0]):
	c[i, :] = a[i, :] + b
# c is [[2, 2], [4, 4], [6, 6]]

# linear algebra
x = np.array([[1, 2], [3, 4]])
v = np.array([9, 10])
x.dot(v), x @ v  # [29, 67]

np.linalg.inv(x)  # inverse matrix
x.T               # transpose</pre></div>

<h2 class="section" id='magicparlabel-53'><span class="section_label">2</span> pandas</h2>

<div class='float-listings'><pre class ='listings Python'>names = pd.Series([&ldquo;A&rdquo;, &ldquo;B&rdquo;, &ldquo;C&rdquo;])
popul = pd.Series([852469, 1015785, 485199])
pd.DataFrame({&ldquo;City Name&rdquo;:names,&rdquo;Population&rdquo;:popul})
# if the series length doesn't match the rest is NaN
# you can only check for it with pd.isna, don't do it
df = pd.read_csv(&ldquo;filename.csv&rdquo;)
df[&ldquo;country&rdquo;] == &ldquo;Israel&rdquo;  # lots of booleans
df[(df[&ldquo;country&rdquo;]==&ldquo;Israel&rdquo;) &amp; (df[&ldquo;population&rdquo;]&gt;7000)]  # only relevant rows
df[&ldquo;country&rdquo;][10]  # country of 11th row

# iloc is by index, loc is by column labels
df.iloc[-1]    # last row
df.iloc[:, 0]  # first column
df.loc[103:107, &ldquo;country&rdquo;]
df = df.set_index(0), df = df.set_index(&ldquo;country&rdquo;),
  df = df.reset_index()  # change the index

# groupby
df.groupby([&ldquo;Team&rdquo;]).Salary.mean()  # averages of salaries
# groupby, groupby.Salary returns a DataFrameGroupBy
# and SeriesGroupBy, which are special objects
df.groupby([&ldquo;Team&rdquo;, &ldquo;Position&rdquo;]).Name.count().head(15)

# merge
# default is to use intersection of keys from both
pd.merge(df1, df2, on=&rdquo;id&rdquo;)
# use only keys from left, may add nans
pd.merge(df1, df2, how=&rdquo;left&rdquo;, on=&rdquo;id&rdquo;)
# how=&rdquo;outer&rdquo; is for the union of all keys, may add nans
# on can also be a list
pd.concat([df1, df2])  # combine the rows of both tables

# apply
capitalizer = lambda x: x.capitalize()
df[&ldquo;A&rdquo;] = df[&ldquo;A&rdquo;].apply(capitalizer)</pre></div>

<h2 class="section" id='magicparlabel-93'><span class="section_label">3</span> קבצים</h2>

<div class='float-listings'><pre class ='listings C'>FILE *fopen(const char *filename, const char *mode);
// returns NULL on failure
int fclose(FILE *fp);
// returns 0 on success or EOF on failure
int fgetc(FILE *fp);
// EOF on end of file or error, otherwise the character
int fputc(int c, FILE *fp);
// EOF on error, otherwise the same character
int fprintf(FILE *fp, const char *format, ...);
// returns the number of characters printed
// fprintf(stdout, ...) is equivalent to printf(...)
int fscanf(FILE *fp, const char *format, ...);
// returns the number of successful inputs
int feof(FILE *fp);
// non-zero when end of file reached
char *fgets(char *s, int size, FILE *fp);
// appends '\0', stops on EOF or newline,
// returns NULL when no characters have been read
int fputs(char *s, FILE *fp);
// without \0, EOF on error, non-negative on success
int fflush(FILE *fp);
// flushes writing, returns 0 on success and EOF on error

int sprintf(char *s, const char *format, ...);
int sscanf(char *s, const char *format, ...);
// like fprintf and scanf but into a string</pre></div>

</body>
</html>
